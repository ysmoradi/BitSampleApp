{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["(async () => {\r\n\r\n    const SecurityService = new Bit.Implementations.DefaultSecurityService();\r\n    const MessageReciever = new Bit.Implementations.SignalRMessageReceiver();\r\n    const GuidUtils = new Bit.Implementations.DefaultGuidUtils();\r\n    const MetadataProvider = new Bit.Implementations.DefaultMetadataProvider();\r\n    const EntityContextProvider = new Bit.Implementations.EntityContextProviderBase(GuidUtils, MetadataProvider, SecurityService);\r\n    const SyncService = new Bit.Implementations.DefaultSyncService();\r\n    const DateTimeService = new Bit.Implementations.DefaultDateTimeService();\r\n    const ClientAppProfileManager = Bit.ClientAppProfileManager.getCurrent();\r\n    const ClientAppProfile = ClientAppProfileManager.getClientAppProfile();\r\n\r\n    await SecurityService.loginWithCredentials(\"Test\", \"Test\", \"SampleApp-ResOwner\", \"secret\");\r\n\r\n    const onlineContext = await EntityContextProvider.getContext<SampleAppContext>(\"SampleApp\");\r\n\r\n    // function\r\n    const categories = await onlineContext.categories.getEmptyCategories()\r\n        .withInlineCount()\r\n        .filter(c => c.Name.includes(\"C\"))\r\n        .orderBy(c => c.Id)\r\n        .take(1)\r\n        .skip(1)\r\n        .toArray();\r\n\r\n    onlineContext.categories.getEmptyCategories()\r\n        .filter((c, arg) => c.Name == arg, { arg: new Date().getDay() /*Some variable for example...*/ })\r\n        .toArray();\r\n\r\n    onlineContext.categories.getEmptyCategories()\r\n        .filter(`(c, arg) => c.Name == arg`, { arg: new Date().getDay() /*Some variable for example...*/ })\r\n        .toArray();\r\n\r\n    // action\r\n    try {\r\n        await onlineContext.products.deactivateProductById(GuidUtils.newGuid());\r\n    }\r\n    catch (e) {\r\n        // error messages\r\n        console.log(e.message);\r\n    }\r\n\r\n    // batch save\r\n    const category = onlineContext.categories.add(new SampleAppModel.CategoryDto({ Id: GuidUtils.newGuid(), Name: \"C1\" }));\r\n    const product1 = onlineContext.products.add(new SampleAppModel.ProductDto({ Id: GuidUtils.newGuid(), Name: \"P1\", CategoryId: category.Id, IsActive: true }));\r\n    const product2 = onlineContext.products.add(new SampleAppModel.ProductDto({ Id: GuidUtils.newGuid(), Name: \"P1\", CategoryId: category.Id, IsActive: true }));\r\n    await onlineContext.saveChanges();\r\n\r\n    // batch read\r\n    const result = await onlineContext.batchExecuteQuery([onlineContext.categories.filter(c => c.AllProductsAreActive == true), onlineContext.products]);\r\n\r\n    // offline context:\r\n    const offlineContext = await EntityContextProvider.getContext<SampleAppContext>(\"SampleApp\", { isOffline: true });\r\n\r\n    // sync\r\n    SyncService.init(() => EntityContextProvider.getContext<SampleAppContext>(\"SampleApp\"), () => EntityContextProvider.getContext<SampleAppContext>(\"SampleApp\", { isOffline: true }));\r\n    SyncService.addEntitySetConfig<SampleAppContext>({ name: \"categories\", dtoType: SampleAppModel.CategoryDto });\r\n\r\n    await SyncService.syncContext();\r\n\r\n    const categories2 = await offlineContext.categories.filter(c => c.ProductsCount == 0).toArray();\r\n\r\n    const someConfigFromServer = ClientAppProfile.getConfig<boolean>(\"SomeConfig\");\r\n\r\n})();\r\n"]}